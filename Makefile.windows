# use extra arguments for commands
MAKE_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(MAKE_ARGS):;@:)

## help	: List all make commands
##		Command: make help
.PHONY: help
help : Makefile
	@sed -n 's/^##//p' $<

#**********************************
# Setup and initialisation commands
#**********************************

## setup: Install the certificates, install all dependencies and build the docker images
##		Command: make setup
.PHONY: setup
setup:
	make certs
	make composer
	make build
	if exist "%ADMIN_CODEBASE%\node_modules" (rmdir /s/q "%ADMIN_CODEBASE%\node_modules")
	docker run --rm -v "%ADMIN_CODEBASE%":/app "apiopenstudio_docker_dev-%ADMIN_SUBDOMAIN%" yarn install

## init: Initialise the DB
##		Command: make setup
.PHONY: init
init:
	docker exec -it "%APP_NAME%-php" php ./bin/aos-install

#**********************
# Spin up/down commands
#**********************

## up	: Build & spin up the docker containers.
##		Command: make up
.PHONY: up
up:
	if exist ".\logs\apiopenstudio" (rmdir /s/q ".\logs\apiopenstudio")
	if exist ".\logs\traefik" (rmdir /s/q ".\logs\traefik")
	if exist ".\logs\nginx" (rmdir /s/q ".\logs\nginx")
	docker compose up -d

## down	: Stop and remove all containers.
##		Command: make down
.PHONY: down
down:
	docker compose down

## stop	: Stop all containers, but do not delete them.
##		Command: make stop
.PHONY: stop
stop:
	docker compose stop

#********************
# Styleguide commands
#********************

## styleguide	: Start the styleguide
##		Command: make styleguide
.PHONY: styleguide
styleguide:
	docker exec -t "%APP_NAME%-%STYLEGUIDE_SUBDOMAIN%" yarn storybook

## styleguide-build	: Build the styleguide
##		Command: make styleguide-build
.PHONY: styleguide-build
styleguide-build:
	docker exec -t "%APP_NAME%-%STYLEGUIDE_SUBDOMAIN%" yarn build-storybook

#*****************
# Testing commands
#*****************

## test-fe	: Run all frontend tests
##		Command: make test-fe
.PHONY: test-fe
test-fe:
	make test-fe-lint
	make test-fe-unit
	mate test-fe-component
	make test-fe-e2e
	make test-fe-coverage

## test-fe-lint	: Run frontend lint tests
##		Command: make test-fe-lint
.PHONY: test-fe-lint
test-fe-lint:
	docker exec -t "%APP_NAME%-%ADMIN_SUBDOMAIN%" yarn ci:lint

## test-fe-unit	: Run frontend unit tests
##		Command: make test-fe-unit
.PHONY: test-fe-unit
test-fe-unit:
	docker exec -t "%APP_NAME%-%ADMIN_SUBDOMAIN%" yarn ci:unit

## test-fe-component	: Run frontend component tests
##		Command: make test-fe-component
.PHONY: test-fe-component
test-fe-component:
	docker run --rm -w /app -v "%ADMIN_CODEBASE%:/app" "%CYPRESS_IMAGE%" sh -c "yarn cypress install --force && yarn cypress run --component --config-file cypress.config.js"

## test-fe-e2e	: Run frontend e2e tests
##		Command: make test-fe-e2e
.PHONY: test-fe-e2e
test-fe-e2e:
	docker run --rm -w /app -v "%ADMIN_CODEBASE%:/app" "%CYPRESS_IMAGE%" sh -c "yarn cypress install --force && yarn cypress run --e2e --config-file cypress.config.js --headless"

## test-fe-coverage	: Run frontend coverage tests
##		Command: make test-fe-coverage
.PHONY: test-fe-coverage
test-fe-coverage:
	docker exec -t "%APP_NAME%-%ADMIN_SUBDOMAIN%" bash -c "vitest run --coverage -c vitest.config.ci.js"

#**********************
# Utility task commands
#**********************

## yarn: Run a yarn command in the admin container.
##		Command: make yarn install
##		Command: make yarn up
##		Command: make yarn down
##		Command: make yarn lint
##		Command: make yarn unit
##		Command: make yarn component
##		Command: make yarn e2e
##		Command: make yarn coverage
.PHONY: yarn
yarn:
	if "${MAKE_ARGS}" == "install" (if exist "%ADMIN_CODEBASE%\node_modules" (rmdir /s/q "%ADMIN_CODEBASE%\node_modules"))
	docker exec -t "%APP_NAME%-%ADMIN_SUBDOMAIN%" yarn "${MAKE_ARGS}"

## composer: Refresh the composer dependencies.
##		Command: make composer
.PHONY: composer
composer:
	if exist "%API_CODEBASE%\composer.lock" (del "%API_CODEBASE%\composer.lock")
	if exist "%API_CODEBASE%\vendor" (rmdir /s/q "%API_CODEBASE%\vendor")
	docker compose run --rm composer

## logs	: View the logs in a docker container.
##		Command: make logs <container>
##		Examples:
##		  	make logs php
##		  	make logs db
##		  	make logs traefik
##		  	make logs api
##		  	make logs admin
.PHONY: logs
logs:
	docker logs "%APP_NAME%-${MAKE_ARGS}"

## build	: build all the images.
##		Command: make build
.PHONY: build
build:
	docker compose build

## certs	: generate the SSL certificates.
##		Command: make certs
.PHONY: certs
certs:
	if exist ".\config\certs\*.pem" (rm /s/q ".\config\certs\*key.pem")
	mkcert "%STYLEGUIDE_SUBDOMAIN%.%DOMAIN%" "%API_SUBDOMAIN%.%DOMAIN%" "%ADMIN_SUBDOMAIN%.%DOMAIN%" "*.%DOMAIN%" localhost 127.0.0.1 ::1
	move .\*.pem %SSL_CERT_DIR%

# https://stackoverflow.com/a/6273809/1826109
%:
	@:
