version: '3.7'

services:

  # Reverse Proxy
  traefik:
    image: "traefik:${TRAEFIK_VERSION}"
    container_name: "${APP_NAME}-traefik"
    command:
      - --log.level=DEBUG
      - --log.filePath=/var/log/error.log
      - --accessLog.filePath=/var/log/access.log
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --api.dashboard=true
      - --api.insecure=true
      - --entryPoints.http.http.redirections.entryPoint.to=https
      - --providers.file.filename=/etc/traefik/dynamic.yml
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/proxy/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./config/certs/api.apiopenstudio.local+5.pem:/etc/certs/apiopenstudio.pem:ro
      - ./config/certs/api.apiopenstudio.local+5-key.pem:/etc/certs/apiopenstudio-key.pem:ro
      - ./logs/traefik:/var/log:rw
    networks:
      - default

  # Node Admin
  admin:
    container_name: "${APP_NAME}-admin"
    build:
      context: .
      dockerfile: "config/docker/Dockerfile-node"
    labels:
      - traefik.enable=true
      - traefik.docker.network=apiopenstudio_docker_dev_default
      - traefik.http.routers.admin.rule=Host(`${ADMIN_SUBDOMAIN}.${DOMAIN}`)
      - traefik.http.routers.admin.tls=true
#      - traefik.http.routers.admin.tls.certresolver=myresolver
#      - traefik.http.services.admin.loadbalancer.server.port=8081
#      - traefik.webservice.admin.entryPoints=http,https,ws,wss
    ports:
      - "8081:8081"
    volumes:
      - ${ADMIN_CODEBASE}:/app:rw
    networks:
      - default

  # NGINX API server
  api:
    image: nginx:stable
    container_name: "${APP_NAME}-api"
    ports:
      - "8082:80"
    volumes:
      - ./config/nginx/api.conf:/etc/nginx/conf.d/default.conf:ro
      - ${API_CODEBASE}:/var/www/html:rw
    depends_on:
      - php
      - db
    labels:
      - traefik.enable=true
      - traefik.docker.network=apiopenstudio_docker_dev_default
      - traefik.http.routers.api.rule=Host(`${API_SUBDOMAIN}.${DOMAIN}`)
      - traefik.http.routers.api.tls=true
#      - traefik.http.routers.api.tls.certresolver=myresolver
#      - traefik.http.middlewares.cors.headers.customResponseHeaders.Access-Control-Allow-Origin=*
#      - traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,DELETE,PUSH,POST
#      - traefik.http.routers.api.middlewares=cors
    networks:
      - default

  # Install composer requires
  composer:
#    image: composer:2.1.11 # Use for PHP 8.0
#    image: composer:2.4.3 # Use for PHP 8.1
    image: composer:latest # Use for PHP 8.2
    container_name: "${APP_NAME}-composer"
    ports:
      - "9002:9000"
    volumes:
      - ${API_CODEBASE}:/app:rw
    command: bash -c "composer install"
    networks:
      - default

  # Database
  db:
    image: mariadb:latest
    container_name: "${APP_NAME}-db"
    ports:
      - "3306:3306"
    volumes:
      - db:/var/lib/mysql:rw
    env_file:
      .env
    restart: always
    labels:
      - traefik.enable=false
    networks:
      - default

  # Generic PHP
  php:
    container_name: "${APP_NAME}-php"
    build:
      context: .
      dockerfile: "config/docker/Dockerfile-${PHP_VERSION}"
      args:
        - WITH_MEMCACHED=${WITH_MEMCACHED}
        - WITH_REDIS=${WITH_REDIS}
    links:
      - db:mysql
    env_file:
      .env
    restart: always
    labels:
      - traefik.enable=false
    ports:
      - "9001:9000"
    volumes:
      - ${API_CODEBASE}:/var/www/html:rw
      - ./logs/apiopenstudio:/var/log/apiopenstudio:rw
    networks:
      - default

#  # Uncomment this to create a Redis server for caching.
#  # Redis cache server
#  redis:
#    image: redis/redis-stack:latest
#    container_name: "${APP_NAME}-redis"
#    ports:
#      - "6379:6379"
#      - "8001:8001"
#    networks:
#      - default

#  # Uncomment this to create a Memcached server for caching.
#  # Memcached server
#  memcached:
#    image: memcached:latest
#    container_name: "${APP_NAME}-memcached"
#    ports:
#      - "11211:11211"
#    command: -m 64
#    networks:
#      - default

#  # Uncomment this for compiling and serving the phpdoc API.
#  # PhpDoc container.
#  phpdocumentor:
#    image: phpdoc/phpdoc:latest
#    platform: linux/amd64
#    container_name: "${APP_NAME}-phpdocumentor"
#    volumes:
#      - ${API_CODEBASE}:/data:rw
#    command:
#      "run -d ./ -t ./public/phpdoc/ --title='PHPDoc'"
#    networks:
#      - default

#  # NGINX PHPDoc server.
#  phpdoc:
#    image: nginx:stable
#    container_name: "${APP_NAME}-phpdoc"
#    ports:
#      - "8083:80"
#    volumes:
#      - ${API_CODEBASE}/public/phpdoc:/var/www/html:ro
#      - ./config/nginx/phpdoc.conf:/etc/nginx/conf.d/default.conf:ro
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=apiopenstudio_docker_dev_default
#      - traefik.http.routers.nginx.rule=Host(`${PHPDOC_SUBDOMAIN}.${DOMAIN}`)
#      - traefik.http.routers.nginx.tls=true
#    networks:
#      - default

volumes:
  db:

networks:
  default:
    driver: bridge


