version: '3.7'

services:

  # Database container.
  db:
    image: mariadb:latest
    container_name: "${APP_NAME}-db"
    ports:
      - "3306:3306"
    volumes:
      - ./dbdata:/var/lib/mysql
    env_file:
      .env
    restart: always
    networks:
      - api_network

  # Reverse Proxy.
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    container_name: "${APP_NAME}-proxy"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs
    networks:
      - api_network

  # Generic PHP container.
  php:
    container_name: "${APP_NAME}-php"
    build:
      context: ./docker
      dockerfile: "Dockerfile-${PHP_VERSION}"
      args:
        - WITH_XDEBUG=${WITH_XDEBUG}
        - WITH_MEMCACHED=${WITH_MEMCACHED}
        - WITH_REDIS=${WITH_REDIS}
    links:
      - db:mysql
    env_file:
      .env
    ports:
      - "9000:9000"
    volumes:
      - ${API_CODEBASE}:/var/www/html/api
      - ${ADMIN_CODEBASE}:/var/www/html/admin
      - ./docker/php.conf:/usr/local/etc/php-fpm.d/zzz-phpSettings.conf
      - ./logs/php:/var/log
    networks:
      - api_network

  # NGINX API server.
  api:
    image: nginx:stable
    container_name: "${APP_NAME}-api"
    hostname: "${API_DOMAIN}"
    ports:
      - "80"
    volumes:
      - ./docker/api.conf:/etc/nginx/conf.d/default.conf
      - ${API_CODEBASE}:/var/www/html/api
      - ./logs/api:/var/log/nginx
    env_file:
      .env
    environment:
      - VIRTUAL_HOST=${API_DOMAIN}
    depends_on:
      - php
    networks:
      api_network:
        aliases:
          - ${API_DOMAIN}

  # Install composer requires.
  composer:
    image: composer:latest # Use for PHP 8.1
#    image: composer:2.1.11 # Use for PHP 8.0
#    image: composer:2.0.8 # Use for PHP 7.4
    container_name: "${APP_NAME}-composer"
    ports:
      - "9001:9000"
    volumes:
      - ${ADMIN_CODEBASE}:/app/admin
      - ${API_CODEBASE}:/app/api
    command:  bash -c "cd api && composer install && cd ../admin && composer install"
    networks:
      - api_network

  # Node container
  node:
    image: node:13
    container_name: "${APP_NAME}-node"
    volumes:
      - ${ADMIN_CODEBASE}:/usr/src/service
    working_dir: /usr/src/service
    command: bash -c "npm install && npm install -g gulp && gulp"
    networks:
      - api_network

  # NGINX Admin server.
  admin:
    image: nginx:stable
    container_name: "${APP_NAME}-admin"
    hostname: "${ADMIN_DOMAIN}"
    ports:
      - "80"
    volumes:
      - ./docker/admin.conf:/etc/nginx/conf.d/default.conf
      - ${ADMIN_CODEBASE}:/var/www/html/admin
      - ./logs/admin:/var/log/nginx
    env_file:
      .env
    environment:
      - VIRTUAL_HOST=${ADMIN_DOMAIN}
    depends_on:
      - php
    networks:
      api_network:
        aliases:
          - ${ADMIN_DOMAIN}

  # Uncomment this to create a Redis server for caching.
  # Redis cache server
  redis:
    image: redis/redis-stack:latest
    container_name: "${APP_NAME}-redis"
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - api_network

#  # Uncomment this to create a Memcached server for caching.
#  # Memcached server
#  memcached:
#    image: memcached:latest
#    container_name: "${APP_NAME}-memcached"
#    ports:
#      - "11211:11211"
#    command: -m 64
#    networks:
#      - api_network

#  # Uncomment this for compiling and serving the phpdoc API.
#  # PhpDoc container.
#  phpdocumentor:
#    image: naala89/phpdoc-rsync:latest
#    container_name: "${APP_NAME}-phpdocumentor"
#    volumes:
#      - ${API_CODEBASE}:/data
#    command:
#      "run -d ./ -t ./public/phpdoc/ --title='PHPDoc'"
#    networks:
#      - api_network
#
#  # NGINX PHPDoc server.
#  phpdoc:
#    image: nginx:stable
#    container_name: "${APP_NAME}-phpdoc"
#    hostname: "${PHPDOC_DOMAIN}"
#    ports:
#      - 80
#    volumes:
#      - ${API_CODEBASE}/public/phpdoc:/var/www/html
#      - ./docker/phpdoc.conf:/etc/nginx/conf.d/default.conf
#      - ./certs/ca.crt:/usr/local/share/ca-certificates/ca.crt
#    environment:
#      - VIRTUAL_HOST=${PHPDOC_DOMAIN}
#    networks:
#      api_network:
#        aliases:
#          - ${PHPDOC_DOMAIN}

networks:
  api_network:
    driver: bridge
