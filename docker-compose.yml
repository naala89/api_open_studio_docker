version: '3.7'

services:

  # Reverse Proxy.
  traefik:
    image: "traefik:${TRAEFIK_VERSION}"
    container_name: "${APP_NAME}-traefik"
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.file.directory=/etc/traefik/dynamic_conf
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/proxy/static.yml:/etc/traefik/traefik.yml:ro
      - ./config/proxy/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./config/certs:/etc/certs:ro
    networks:
      - api_network

  # Database container.
  db:
    image: mariadb:latest
    container_name: "${APP_NAME}-db"
    ports:
      - "3306:3306"
    volumes:
      - ./dbdata:/var/lib/mysql
    env_file:
      .env
    restart: always
    networks:
      - api_network

  # Generic PHP container.
  php:
    container_name: "${APP_NAME}-php"
    build:
      context: .
      dockerfile: "config/docker/Dockerfile-${PHP_VERSION}"
      args:
        - WITH_MEMCACHED=${WITH_MEMCACHED}
        - WITH_REDIS=${WITH_REDIS}
    links:
      - db:mysql
    env_file:
      .env
    ports:
      - "9000:9000"
    volumes:
      - ./config/php/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
      - ./config/php/php.conf:/usr/local/etc/php/conf.d/php.conf
      - ./config/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ${API_CODEBASE}:/var/www/html
      - ./logs/apiopenstudio:/var/log/apiopenstudio
#      - ./logs/access.log:/var/log/access.log
#      - ./logs/error.log:/var/log/error.log
    networks:
      - api_network

  # NGINX API server.
  api:
    image: nginx:stable
    container_name: "${APP_NAME}-api"
    ports:
      - "80"
    volumes:
      - ./config/nginx/api.conf:/etc/nginx/conf.d/default.conf
      - ${API_CODEBASE}:/var/www/html
#      - ./logs/apiopenstudio:/var/log/apiopenstudio
    depends_on:
      - php
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=api_network"
      - "traefik.http.routers.nginx.rule=Host(`${API_SUBDOMAIN}.${DOMAIN}`)"
      - "traefik.http.routers.nginx.tls=true"
    networks:
      - api_network

  # Install composer requires.
  composer:
    # image: composer:2.1.11 # Use for PHP 8.0
    # image: composer:2.4.3 # Use for PHP 8.1
    image: composer:latest # Use for PHP 8.2
    container_name: "${APP_NAME}-composer"
    ports:
      - "9001:9000"
    volumes:
      - ${API_CODEBASE}:/app
    command:  bash -c "composer install"
    networks:
      - api_network

#  # Node container
#  node:
#    image: node:13
#    container_name: "${APP_NAME}-node"
#    volumes:
#      - ${ADMIN_CODEBASE}:/usr/src/service
#    working_dir: /usr/src/service
#    command: bash -c "npm install && npm install -g gulp && gulp"
#    networks:
#      - api_network

#  # NGINX Admin server.
#  admin:
#    image: nginx:stable
#    container_name: "${APP_NAME}-admin"
#    hostname: "${ADMIN_DOMAIN}"
#    ports:
#      - "80"
#    volumes:
#      - ./config/nginx/admin.conf:/etc/nginx/conf.d/default.conf
#      - ${ADMIN_CODEBASE}:/var/www/html/admin
#      - ./logs/admin:/var/log/nginx
#    env_file:
#      .env
#    environment:
#      - VIRTUAL_HOST=${ADMIN_DOMAIN}
#    depends_on:
#      - php
#    networks:
#      api_network:
#        aliases:
#          - ${ADMIN_DOMAIN}

#  # Uncomment this to create a Redis server for caching.
#  # Redis cache server
#  redis:
#    image: redis/redis-stack:latest
#    container_name: "${APP_NAME}-redis"
#    ports:
#      - "6379:6379"
#      - "8001:8001"
#    networks:
#      - api_network

#  # Uncomment this to create a Memcached server for caching.
#  # Memcached server
#  memcached:
#    image: memcached:latest
#    container_name: "${APP_NAME}-memcached"
#    ports:
#      - "11211:11211"
#    command: -m 64
#    networks:
#      - api_network

#  # Uncomment this for compiling and serving the phpdoc API.
#  # PhpDoc container.
#  phpdocumentor:
#    image: phpdoc/phpdoc:latest
#    container_name: "${APP_NAME}-phpdocumentor"
#    volumes:
#      - ${API_CODEBASE}:/data
#    command:
#      "run -d ./ -t ./public/phpdoc/ --title='PHPDoc'"
#    networks:
#      - api_network
#
#  # NGINX PHPDoc server.
#  phpdoc:
#    image: nginx:stable
#    container_name: "${APP_NAME}-phpdoc"
#    hostname: "${PHPDOC_DOMAIN}"
#    ports:
#      - 80
#    volumes:
#      - ${API_CODEBASE}/public/phpdoc:/var/www/html
#      - ./config/nginx/phpdoc.conf:/etc/nginx/conf.d/default.conf
#      - ./certs/ca.crt:/usr/local/share/ca-certificates/ca.crt
#    environment:
#      - VIRTUAL_HOST=${PHPDOC_DOMAIN}
#    networks:
#      api_network:
#        aliases:
#          - ${PHPDOC_DOMAIN}

networks:
  api_network:
    driver: bridge
