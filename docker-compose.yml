version: '3.7'

services:

  # Database container.
  db:
    image: mariadb:latest
    container_name: "${APP_NAME}-db"
    ports:
      - "3306:3306"
    volumes:
      - ./dbdata:/var/lib/mysql
    env_file:
      .env
    restart: always
    networks:
      - api_network

  # Install composer requires.
  composer:
    image: composer:latest
    container_name: "${APP_NAME}-composer"
    ports:
      - "9001:9000"
    volumes:
      - ${ADMIN_CODEBASE}:/app/admin
      - ${API_CODEBASE}:/app/api
    command:  bash -c "cd api && composer install && cd ../admin && composer install"
    networks:
      - api_network

  # Node container
  node:
    image: node:latest
    container_name: "${APP_NAME}-node"
    volumes:
      - ${ADMIN_CODEBASE}:/usr/src/service
    working_dir: /usr/src/service
    command: bash -c "npm install && npm install -g gulp && gulp"
    networks:
      - api_network

  # Reverse Proxy.
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    container_name: "${APP_NAME}-proxy"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs
    networks:
      - api_network

  # Generic PHP container.
  php:
    image: php:7-fpm
    container_name: "${APP_NAME}-php"
    build:
      context: ./docker
      args:
        - WITH_XDEBUG=${WITH_XDEBUG}
    links:
      - db:mysql
    env_file:
      .env
    ports:
      - "9000:9000"
    volumes:
      - ${API_CODEBASE}:/var/www/html/api
      - ${ADMIN_CODEBASE}:/var/www/html/admin
      - ./docker/php.conf:/usr/local/etc/php-fpm.d/zzz-phpSettings.conf
      - ./logs/php:/var/log
    networks:
      - api_network

  # NGINX API server.
  api:
    image: nginx:stable
    container_name: "${APP_NAME}-api"
    hostname: "${API_DOMAIN}"
    ports:
      - 80
    volumes:
      - ./docker/api.conf:/etc/nginx/conf.d/default.conf
      - ${API_CODEBASE}:/var/www/html/api
      - ./logs/api:/var/log/nginx
    env_file:
      .env
    environment:
      - VIRTUAL_HOST=${API_DOMAIN}
    depends_on:
      - php
    networks:
      api_network:
        aliases:
          - ${API_DOMAIN}

  # NGINX Admin server.
  admin:
    image: nginx:stable
    container_name: "${APP_NAME}-admin"
    hostname: "${ADMIN_DOMAIN}"
    ports:
      - 80
    volumes:
      - ./docker/admin.conf:/etc/nginx/conf.d/default.conf
      - ${ADMIN_CODEBASE}:/var/www/html/admin
      - ./logs/admin:/var/log/nginx
    env_file:
      .env
    environment:
      - VIRTUAL_HOST=${ADMIN_DOMAIN}
    depends_on:
      - php
    networks:
      api_network:
        aliases:
          - ${ADMIN_DOMAIN}

  # Email container.
  email:
    image: namshi/smtp:latest
    container_name: "${APP_NAME}-email"
    networks:
      - api_network
    #ports:
      #- "25:25"
    environment:
      # MUST start with : e.g RELAY_NETWORKS=:192.168.0.0/24:10.0.0.0/16
      # if acting as a relay this or RELAY_DOMAINS must be filled out or incoming mail will be rejected
      #- RELAY_NETWORKS= :192.168.0.0/24
      # what domains should be accepted to forward to lower distance MX server.
      #- RELAY_DOMAINS= <domain1> : <domain2> : <domain3>
      # To act as a Gmail relay
      - GMAIL_USER=${EMAIL_USERNAME}
      - GMAIL_PASSWORD=${EMAIL_PASSWORD}
      # For use with Amazon SES relay
      #- SES_USER=
      #- SES_PASSWORD=
      #- SES_REGION=
      # if provided will enable TLS support
      #- KEY_PATH=certs/apiopenstudio.local
      #- CERTIFICATE_PATH=certs/apiopenstudio.local.crt
      # the outgoing mail hostname
      #- MAILNAME=admin.apiopenstudio.local
      # set this to any value to disable ipv6
      #- DISABLE_IPV6=
      # Generic SMTP Relay
      #- SMARTHOST_ADDRESS=
      #- SMARTHOST_PORT=
      #- SMARTHOST_USER=
      #- SMARTHOST_PASSWORD=
      #- SMARTHOST_ALIASES=

#  # Uncomment this for serving the wiki.
#  # Bookdown container.
#  bookdown:
#    image: sandrokeil/bookdown
#    container_name: "${APP_NAME}-bookdown"
#    volumes:
#      - ${API_CODEBASE}/includes/wiki:/app
#      - ${API_CODEBASE}/public/wiki:/wiki
#    environment:
#      - CSS_BOOTSWATCH=spacelab
#      - CSS_PRISM=prism
#      - MENU_LOGO=/img/api_open_studio_logo_name_colour.png
#    command: [ "bookdown.json" ]
#    networks:
#      - api_network
#  # NGINX Wiki server.
#  wiki:
#    image: nginx:stable
#    container_name: "${APP_NAME}-wiki"
#    hostname: "${WIKI_DOMAIN}"
#    ports:
#      - 80
#    volumes:
#      - ${API_CODEBASE}/public/wiki:/var/www/html
#      - ./docker/wiki.conf:/etc/nginx/conf.d/default.conf
#      - ./certs/ca.crt:/usr/local/share/ca-certificates/ca.crt
#    environment:
#      - VIRTUAL_HOST=${WIKI_DOMAIN}
#    networks:
#      api_network:
#        aliases:
#          - ${WIKI_DOMAIN}

#  # Uncomment this for compiling and serving the phpdoc API.
#  # PhpDoc container.
#  # This will save headaches with setting up phpdocumentor requirements on your host!
#  phpdocumentor:
#    image: phpdoc/phpdoc
#    container_name: "${APP_NAME}-phpdocumentor"
#    volumes:
#      - ${API_CODEBASE}:/data
#    command: "run -d ./ -t public/phpdoc --ignore vendor/,tests/"
#    networks:
#      - api_network
#  # NGINX PHPDoc server.
#  phpdoc:
#    image: nginx:stable
#    container_name: "${APP_NAME}-phpdoc"
#    hostname: "${PHPDOC_DOMAIN}"
#    ports:
#      - 80
#    volumes:
#      - ${API_CODEBASE}/public/phpdoc:/var/www/html
#      - ./docker/phpdoc.conf:/etc/nginx/conf.d/default.conf
#      - ./certs/ca.crt:/usr/local/share/ca-certificates/ca.crt
#    environment:
#      - VIRTUAL_HOST=${PHPDOC_DOMAIN}
#    networks:
#      api_network:
#        aliases:
#          - ${PHPDOC_DOMAIN}

networks:
  api_network:
    driver: bridge